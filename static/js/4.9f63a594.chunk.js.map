{"version":3,"sources":["constant/global.js","custom-fields/InputField/index.jsx","custom-fields/RandomPhotoField/index.jsx","custom-fields/SelectField/index.jsx","features/Photos/components/PhotoForm/index.jsx","features/Photos/components/PhotoList/index.jsx","features/Photos/components/PhotoCard/index.jsx","features/Photos/components/PhotoCategory/index.jsx","features/Photos/Pages/PhotoMainPage/index.jsx","logic/randomId.js","features/Photos/Pages/PhotoAddPage/index.jsx","features/Photos/index.jsx"],"names":["PHOTO_CATEGORY_OPTIONS","value","label","InputField","props","name","placeholder","type","size","fast","defaultProps","disabled","RandomPhotoField","field","form","isAddMode","useState","currentUrl","setCurretUrl","querySearch","setQuerySearch","isRandom","setIsRandom","useEffect","handleRandomClick","url","a","fetch","response","clone","data","setFieldValue","fetchImage","className","src","height","width","alt","addonBefore","allowClear","onChange","e","target","loading","onClick","SelectField","options","map","option","Option","PhotoForm","onSubmited","initalValues","photoSchema","Yup","shape","title","required","categoryId","nullable","initialValues","validationSchema","onSubmit","FormikProps","values","errors","touched","autoComplete","layout","component","htmlType","block","Text","Typography","PhotoList","photos","handleRemovePhoto","handleEditPhoto","handleDownloadPhoto","match","useRouteMatch","length","to","gutter","PreviewGroup","item","xs","sm","lg","id","PhotoCard","photoUrl","isPopOpen","setIsPopOpen","popOverRef","useRef","document","addEventListener","parentElement","current","data-aos","EllipsisOutlined","ref","DownloadOutlined","style","margin","DeleteOutlined","EditOutlined","PhotoCategory","categoryList","handleCategoryChange","currentCategory","isShowBtn","setIsShowBtn","sliceRef","slideWidth","offsetWidth","bodyWidth","body","scrollBy","left","LeftOutlined","RightOutlined","itemCate","find","cate","PhotoPage","PhotosData","useSelector","state","isLoading","setIsLoading","showList","setShowList","setCurrentCategory","setCategoryList","dispatch","useDispatch","history","useHistory","window","scrollTo","listCate","forEach","photo","push","Array","from","Set","getArrayCate","newList","filter","renderList","cateId","idPhoto","message","content","key","setTimeout","action","removePhoto","success","duration","axios","method","responseType","then","URL","createObjectURL","Blob","link","createElement","href","setAttribute","appendChild","click","parentNode","removeChild","randomStr","strLength","chars","Math","trunc","random","join","randomId","now","String","Date","middlePos","ceil","output","substr","prefix","PhotoAddPage","photoId","useParams","editedPhoto","newPhoto","addPhoto","updatePhoto","Photos","exact","path","NotFound"],"mappings":"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","file":"static/js/4.9f63a594.chunk.js","sourcesContent":["export const PHOTO_CATEGORY_OPTIONS = [\r\n    { value: 1, label: 'Food and Drink' },\r\n    { value: 2, label: 'Wallpapers' },\r\n    { value: 3, label: 'Nature' },\r\n    { value: 4, label: 'Love' },\r\n    { value: 5, label: 'People' },\r\n    { value: 6, label: 'Animals' },\r\n    { value: 7, label: 'Architecture - Kiến trúc' },\r\n    { value: 8, label: 'Interiors - Nội thất' },\r\n    { value: 9, label: 'Fashion' },\r\n    { value: 10, label: 'Street Photography' },\r\n    { value: 11, label: 'Textures & Patterns' },\r\n    { value: 12, label: 'Technology' },\r\n    { value: 13, label: 'Travel' },\r\n    { value: 14, label: 'Sport' },\r\n    { value: 15, label: 'Spirituality - Tâm linh' },\r\n    { value: 16, label: 'Arts & Culture' },\r\n    { value: 17, label: 'Film' },\r\n    { value: 18, label: 'Vihicle' },\r\n    { value: 19, label: 'Others' },\r\n]\r\n","import { FormItem, Input } from 'formik-antd';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\n\r\nInputField.propTypes = {\r\n    label: PropTypes.string,\r\n    placeholder: PropTypes.string,\r\n    type: PropTypes.string,\r\n    disable: PropTypes.bool\r\n};\r\n\r\nInputField.defaultProps = {\r\n    label: '',\r\n    placeholder: '',\r\n    type: 'text',\r\n    disabled: false\r\n}\r\n\r\nfunction InputField(props) {\r\n    const { label, name, placeholder, type } = props;\r\n\r\n    return (\r\n        <FormItem\r\n            label={label}\r\n            name={name}\r\n        >\r\n            <Input\r\n                name={name}\r\n                placeholder={placeholder}\r\n                type={type}\r\n                size=\"large\"\r\n                fast={true}\r\n            />\r\n        </FormItem>\r\n    );\r\n}\r\n\r\nexport default InputField;","import { Button, Image } from 'antd';\r\nimport { FormItem, Input } from 'formik-antd';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport './randomphotofield.scss';\r\n\r\nRandomPhotoField.propTypes = {\r\n    label: PropTypes.string,\r\n    name: PropTypes.string,\r\n};\r\n\r\nRandomPhotoField.defaultProps = {\r\n    label: '',\r\n    name: '',\r\n}\r\n\r\nfunction RandomPhotoField(props) {\r\n    const { field, form, label, isAddMode } = props;\r\n    const { name, value } = field;\r\n    const [currentUrl, setCurretUrl] = useState('');\r\n    const [querySearch, setQuerySearch] = useState('');\r\n    const [isRandom, setIsRandom] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (isAddMode) {\r\n            handleRandomClick();\r\n        } else {\r\n            return;\r\n        }\r\n    }, []);\r\n\r\n    const handleRandomClick = () => {\r\n        const url = `https://source.unsplash.com/featured/?${querySearch}`;\r\n        setIsRandom(true);\r\n        const fetchImage = async () => {\r\n            const response = await fetch(url);\r\n            const data = await response.clone();\r\n            setCurretUrl(data.url);\r\n            form.setFieldValue(name, data.url);\r\n            setIsRandom(false);\r\n        }\r\n        fetchImage();\r\n    }\r\n\r\n    return (\r\n        <FormItem\r\n            name={name}\r\n            label={label}\r\n        >\r\n            <div className=\"photo-wrapper\">\r\n                <Image\r\n                    src={isAddMode ? currentUrl : value}\r\n                    height={400}\r\n                    width={\"100%\"}\r\n                    alt=\"Awesome photo.\"\r\n                />\r\n            </div>\r\n            <div className=\"photo-field\">\r\n                <Input\r\n                    addonBefore=\"Key\"\r\n                    placeholder=\"Eg: cat,dog\"\r\n                    size=\"large\"\r\n                    allowClear\r\n                    value={querySearch}\r\n                    onChange={e => setQuerySearch(e.target.value)}\r\n                />\r\n                <Button\r\n                    loading={isRandom}\r\n                    size=\"large\"\r\n                    onClick={handleRandomClick}\r\n                    type=\"primary\"\r\n                >\r\n                    Random\r\n                </Button>\r\n            </div>\r\n\r\n        </FormItem>\r\n    );\r\n}\r\n\r\nexport default RandomPhotoField;","import { FormItem, Select } from 'formik-antd';\r\nimport React from 'react';\r\nimport './selectfield.scss';\r\n\r\n\r\nSelectField.propTypes = {\r\n\r\n};\r\n\r\nfunction SelectField(props) {\r\n    const { label, name, placeholder, options } = props;\r\n\r\n\r\n    return (\r\n        <FormItem\r\n            label={label}\r\n            name={name}\r\n        >\r\n            <Select\r\n                name={name}\r\n                placeholder={placeholder}\r\n                size=\"large\"\r\n            >\r\n                {options.map((option) => (\r\n                    <Select.Option key={option.value} value={option.value}>{option.label}</Select.Option>\r\n                ))}\r\n            </Select>\r\n        </FormItem>\r\n    );\r\n}\r\n\r\nexport default SelectField;","import { PHOTO_CATEGORY_OPTIONS } from 'constant/global';\r\nimport InputField from 'custom-fields/InputField';\r\nimport RandomPhotoField from 'custom-fields/RandomPhotoField';\r\nimport SelectField from 'custom-fields/SelectField';\r\nimport { FastField, Formik } from 'formik';\r\nimport { Form, SubmitButton } from 'formik-antd';\r\nimport PropTypes from 'prop-types';\r\nimport React, { useState } from 'react';\r\nimport * as Yup from 'yup';\r\n\r\nPhotoForm.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n};\r\n\r\nfunction PhotoForm(props) {\r\n    const { onSubmited, initalValues, isAddMode } = props;\r\n\r\n    const photoSchema = Yup.object().shape({\r\n        title: Yup.string().required(\"This field is required!\"),\r\n        categoryId: Yup.number().required('This field is required!').nullable(),\r\n    })\r\n\r\n    return (\r\n        <Formik\r\n            initialValues={initalValues}\r\n            validationSchema={photoSchema}\r\n            onSubmit={onSubmited}\r\n        >\r\n            {FormikProps => {\r\n                const { values, errors, touched } = FormikProps;\r\n\r\n                return (\r\n                    <Form\r\n                        autoComplete=\"off\"\r\n                        layout=\"vertical\"\r\n                    >\r\n                        <FastField\r\n                            name=\"photoUrl\"\r\n                            label=\"Photo\"\r\n                            component={RandomPhotoField}\r\n                            isAddMode={isAddMode}\r\n                        />\r\n                        <InputField\r\n                            label=\"Title\"\r\n                            name=\"title\"\r\n                            placeholder=\"Eg: Cute puppy\"\r\n                            type=\"text\"\r\n                        />\r\n                        <SelectField\r\n                            label=\"Category\"\r\n                            name=\"categoryId\"\r\n                            placeholder=\"what is category\"\r\n                            options={PHOTO_CATEGORY_OPTIONS}\r\n                        />\r\n\r\n\r\n                        <SubmitButton\r\n                            disabled={false}\r\n                            size=\"large\"\r\n                            type=\"primary\"\r\n                            htmlType=\"submit\"\r\n                            block\r\n                        >\r\n                            {isAddMode ? \"Add to gallery\" : \"Update your photo\"}\r\n                        </SubmitButton>\r\n                    </Form>\r\n                )\r\n            }}\r\n        </Formik>\r\n    );\r\n}\r\n\r\nexport default PhotoForm;","import { PlusOutlined } from '@ant-design/icons';\r\nimport { Button, Col, Image, Row, Typography } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport React from 'react';\r\nimport { Link, useRouteMatch } from 'react-router-dom';\r\nimport { PhotoCard } from '..';\r\nimport './photolist.scss';\r\nconst { Text } = Typography;\r\nPhotoList.propTypes = {\r\n    photos: PropTypes.array,\r\n};\r\n\r\nfunction PhotoList(props) {\r\n    const {\r\n        photos,\r\n        handleRemovePhoto,\r\n        handleEditPhoto,\r\n        handleDownloadPhoto\r\n    } = props;\r\n    const match = useRouteMatch();\r\n\r\n    if (photos.length === 0) {\r\n        return (\r\n            <div className=\"text-center\">\r\n                <Text type=\"secondary\" >\r\n                    Your gallery is empty.\r\n                    <Link to={`${match.url}/add`}> Add a new photo</Link>\r\n                </Text>\r\n            </div>\r\n        )\r\n    }\r\n    return (\r\n        <div>\r\n            <Row gutter={[16, 16]}>\r\n                <Image.PreviewGroup>\r\n                    {photos.map(item => (\r\n                        <Col xs={24} sm={12} lg={8} key={item.id}>\r\n                            <PhotoCard\r\n                                data={item}\r\n                                handleRemovePhoto={handleRemovePhoto}\r\n                                handleEditPhoto={handleEditPhoto}\r\n                                handleDownloadPhoto={handleDownloadPhoto}\r\n                            />\r\n                        </Col>\r\n                    ))}\r\n                </Image.PreviewGroup>\r\n            </Row>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PhotoList;","import { DeleteOutlined, DownloadOutlined, EditOutlined, EllipsisOutlined } from '@ant-design/icons';\r\nimport { Divider, Image } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\nimport './photocard.scss';\r\n\r\nPhotoCard.propTypes = {\r\n    src: PropTypes.string,\r\n    title: PropTypes.string,\r\n};\r\n\r\nfunction PhotoCard(props) {\r\n    const { data, handleRemovePhoto, handleEditPhoto, handleDownloadPhoto } = props;\r\n    const { id, title, photoUrl } = data;\r\n\r\n    const [isPopOpen, setIsPopOpen] = useState(false);\r\n    const popOverRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('click', (e) => {\r\n            if (e.target.parentElement !== popOverRef.current) {\r\n                setIsPopOpen(false)\r\n            }\r\n        })\r\n    })\r\n\r\n    const handleIsPopOpen = () => {\r\n        setIsPopOpen(!isPopOpen);\r\n    }\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"photo-card\" data-aos=\"fade-up\">\r\n            <Image\r\n                height={400}\r\n                width={\"100%\"}\r\n                src={photoUrl}\r\n                alt={`Image of ${title}`}\r\n            />\r\n            <div className=\"photo-card__meta\">\r\n                <span className=\"photo-card__meta-item title\">{title}</span>\r\n                <div\r\n                    className=\"photo-card__meta-item func\"\r\n                    onClick={handleIsPopOpen}\r\n                >\r\n                    <EllipsisOutlined ref={popOverRef} />\r\n                </div>\r\n                {isPopOpen &&\r\n                    <div className=\"popover\">\r\n                        <a onClick={() => handleDownloadPhoto(photoUrl, title)}>\r\n                            <DownloadOutlined />\r\n                            Download\r\n                        </a>\r\n                        <Divider style={{ margin: ' 0' }} />\r\n                        <a onClick={() => handleRemovePhoto(id)}>\r\n                            <DeleteOutlined />\r\n                            Delete\r\n                        </a>\r\n                        <Divider style={{ margin: ' 0' }} />\r\n                        <a onClick={() => handleEditPhoto(id)}>\r\n                            <EditOutlined />\r\n                            Edit\r\n                        </a>\r\n                    </div>\r\n                }\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PhotoCard;","import { LeftOutlined, RightOutlined } from '@ant-design/icons';\r\nimport { PHOTO_CATEGORY_OPTIONS } from 'constant/global';\r\nimport React, { useRef, useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport './photocategory.scss';\r\n\r\nPhotoCategory.propTypes = {\r\n\r\n};\r\n\r\nfunction PhotoCategory(props) {\r\n    const { categoryList, handleCategoryChange, currentCategory } = props;\r\n\r\n    const [isShowBtn, setIsShowBtn] = useState(false);\r\n\r\n    const sliceRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const slideWidth = sliceRef.current.offsetWidth;\r\n        const bodyWidth = document.body.offsetWidth;\r\n        if (bodyWidth > 1111) {\r\n\r\n            if (slideWidth > (1111 - 160)) {\r\n                setIsShowBtn(true);\r\n            } else {\r\n                setIsShowBtn(false)\r\n            }\r\n        } else {\r\n            if (slideWidth > (bodyWidth - 160)) {\r\n                setIsShowBtn(true);\r\n            } else {\r\n                setIsShowBtn(false)\r\n            }\r\n        }\r\n    })\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"category-bar\">\r\n            <button\r\n                className={`category-item all ${currentCategory === 0 ? 'active' : ''}`}\r\n                onClick={() => handleCategoryChange(0)}\r\n            >\r\n                <span>All</span>\r\n            </button>\r\n            <div className=\"category-bar__wrap\">\r\n                {isShowBtn && <div\r\n                    className=\"category-btn left\"\r\n                    onClick={() => sliceRef.current.scrollBy({\r\n                        left: -200,\r\n                    })}\r\n                >\r\n                    <LeftOutlined />\r\n                </div>}\r\n                {isShowBtn && <div\r\n                    className=\"category-btn right\"\r\n                    onClick={() => sliceRef.current.scrollBy({\r\n                        left: 200\r\n                    })}\r\n                >\r\n                    <RightOutlined />\r\n                </div>}\r\n                {!isShowBtn && <div className=\"divider\"></div>}\r\n                <div ref={sliceRef} className=\"category-bar__slide\">\r\n                    {categoryList.map((id) => {\r\n                        const itemCate = PHOTO_CATEGORY_OPTIONS.find((cate) => cate.value === id);\r\n                        return (\r\n                            <button\r\n                                key={itemCate.value}\r\n                                className={`category-item ${currentCategory === itemCate.value ? 'active' : ''}`}\r\n                                onClick={() => handleCategoryChange(itemCate.value)}\r\n                            >\r\n                                <span>{itemCate.label}</span>\r\n                            </button>\r\n                        )\r\n                    })}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PhotoCategory;","import { render } from '@testing-library/react';\r\nimport { Button, message } from 'antd';\r\nimport axios from 'axios';\r\nimport { Banner, Loading } from 'components';\r\nimport { PhotoCategory, PhotoList } from 'features/Photos/components';\r\nimport { removePhoto } from 'features/Photos/photoSlide';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, useHistory, useRouteMatch } from 'react-router-dom';\r\nimport './photomainpage.scss';\r\n\r\n\r\nPhotoPage.propTypes = {\r\n\r\n};\r\n\r\nfunction PhotoPage(props) {\r\n    const PhotosData = useSelector(state => state.photos);\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [showList, setShowList] = useState(PhotosData);\r\n    const [currentCategory, setCurrentCategory] = useState(0);\r\n    const [categoryList, setCategoryList] = useState([]);\r\n\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const match = useRouteMatch();\r\n\r\n    //update category when change list\r\n    useEffect(() => {\r\n        window.scrollTo(0, 0);\r\n        const getArrayCate = () => {\r\n            const listCate = [];\r\n            PhotosData.forEach(photo => {\r\n                listCate.push(photo.categoryId);\r\n            });\r\n            setCategoryList(Array.from(new Set(listCate)));\r\n        }\r\n        const renderList = () => {\r\n            if (currentCategory === 0) {\r\n                setShowList(PhotosData);\r\n            } else {\r\n                const newList = PhotosData.filter(photo => photo.categoryId === currentCategory);\r\n                setShowList(newList);\r\n            }\r\n        }\r\n        getArrayCate();\r\n        renderList();\r\n    }, [PhotosData])\r\n\r\n    const handleRemovePhoto = (idPhoto) => {\r\n        message.loading({ content: 'Deleting...', key: 'remove' });\r\n        setTimeout(() => {\r\n            const action = removePhoto(idPhoto);\r\n            dispatch(action);\r\n            message.success({ content: 'Deleted!', key: 'remove', duration: 2 });\r\n        }, 1000)\r\n    }\r\n    const handleEditPhoto = (idPhoto) => {\r\n        setIsLoading(true);\r\n        setTimeout(() => {\r\n            history.push(`${match.url}/edit/${idPhoto}`);\r\n            setIsLoading(false);\r\n        }, 1000)\r\n    }\r\n    const handleDownloadPhoto = (photoUrl, title) => {\r\n        axios({\r\n            url: photoUrl,\r\n            method: \"GET\",\r\n            responseType: \"blob\"\r\n        }).then((response) => {\r\n            const url = window.URL.createObjectURL(new Blob([response.data]));\r\n            const link = document.createElement(\"a\");\r\n            link.href = url;\r\n            link.setAttribute(\"download\", `${title}.jpg`);\r\n            document.body.appendChild(link);\r\n            link.click();\r\n            link.parentNode.removeChild(link);\r\n        });\r\n    }\r\n    const handleCategoryChange = (cateId) => {\r\n        setCurrentCategory(cateId);\r\n        if (cateId === 0) {\r\n            setShowList(PhotosData);\r\n        } else {\r\n            const newList = PhotosData.filter(photo => photo.categoryId === cateId);\r\n            setShowList(newList);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Banner title=\"Awesome Photos 😍\" />\r\n            <div className=\"content container\">\r\n                <div className=\"gallery-top\">\r\n                    <h2 className=\"gallery-title\"> My Gallery </h2>\r\n                    <Button type=\"primary\" className=\"gallery-btn\">\r\n                        <Link to={`${match.url}/add`} className=\"gallery-link\">\r\n                            Add new photo\r\n                        </Link>\r\n                    </Button>\r\n                </div>\r\n                {categoryList.length !== 0 && <PhotoCategory\r\n                    categoryList={categoryList}\r\n                    handleCategoryChange={handleCategoryChange}\r\n                    currentCategory={currentCategory}\r\n                />}\r\n                <PhotoList\r\n                    photos={showList}\r\n                    handleRemovePhoto={handleRemovePhoto}\r\n                    handleEditPhoto={handleEditPhoto}\r\n                    handleDownloadPhoto={handleDownloadPhoto}\r\n                />\r\n            </div>\r\n            {isLoading && <Loading />}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PhotoPage;","function randomStr(strLength) {\r\n    const chars = [...'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'];\r\n    return [...Array(strLength)]\r\n        .map(() => chars[Math.trunc(Math.random() * chars.length)])\r\n        .join('');\r\n}\r\n\r\nfunction randomId(options = {}) {\r\n    const now = String(Date.now());\r\n    const middlePos = Math.ceil(now.length / 2);\r\n    let output = `${now.substr(0, middlePos)}-${randomStr(6)}-${now.substr(middlePos)}`;\r\n\r\n    if (options.prefix) output = `${options.prefix}-${output}`;\r\n\r\n    return output;\r\n}\r\n\r\nexport default randomId;","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { Banner } from 'components';\r\nimport { PhotoForm } from 'features/Photos/components';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { addPhoto, updatePhoto } from 'features/Photos/photoSlide';\r\nimport randomId from 'logic/randomId'\r\nimport { Loading } from 'components';\r\nimport { message } from 'antd';\r\n\r\n\r\nPhotoAddPage.propTypes = {\r\n\r\n};\r\n\r\n\r\nfunction PhotoAddPage(props) {\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const photos = useSelector(state => state.photos);\r\n    const dispatch = useDispatch();\r\n    const history = useHistory();\r\n    const { photoId } = useParams();\r\n\r\n    const isAddMode = !photoId;\r\n    const editedPhoto = photos.find(photo => photo.id === photoId);\r\n\r\n    const initalValues = isAddMode ? {\r\n        title: '',\r\n        categoryId: null,\r\n        photoUrl: ''\r\n    } : editedPhoto;\r\n\r\n    //Scroll top first\r\n    useState(() => {\r\n        setIsLoading(true);\r\n        window.scrollTo(0, 0);\r\n        setTimeout(() => {\r\n            setIsLoading(false);\r\n        }, 1000)\r\n    }, []);\r\n\r\n    const handleFormSubmit = (values) => {\r\n        message.loading({ content: `${isAddMode ? 'Adding...' : 'Updating...'}`, key: 'addedit' });\r\n        setTimeout(() => {\r\n            if (isAddMode) {\r\n                const newPhoto = {\r\n                    ...values,\r\n                    id: randomId({ prefix: 'photo' })\r\n                }\r\n                const action = addPhoto(newPhoto);\r\n                dispatch(action);\r\n            } else {\r\n                const action = updatePhoto(values);\r\n                dispatch(action);\r\n            }\r\n\r\n            history.push('/photos');\r\n            message.success({ content: 'Done!', key: 'addedit', duration: 1 });\r\n        }, 2000)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Banner title={isAddMode ? \"Add a awesome photo 😎\" : \"Edit your photo 😚\"} />\r\n            <div className=\"content form-edit container\">\r\n                <PhotoForm\r\n                    isAddMode={isAddMode}\r\n                    initalValues={initalValues}\r\n                    onSubmited={handleFormSubmit}\r\n                />\r\n            </div>\r\n            {isLoading && <Loading />}\r\n        </>\r\n    );\r\n}\r\n\r\nexport default PhotoAddPage;","import React from 'react';\r\nimport { useRouteMatch } from 'react-router-dom';\r\nimport { Switch, Route } from 'react-router-dom'\r\n\r\nimport PhotoPage from './Pages/PhotoMainPage'\r\nimport PhotoAddPage from './Pages/PhotoAddPage';\r\nimport { NotFound } from 'components';\r\n\r\n\r\nfunction Photos(props) {\r\n    const match = useRouteMatch();\r\n    return (\r\n        <>\r\n            <Switch>\r\n                <Route exact path={match.url} component={PhotoPage} />\r\n                <Route path={`${match.url}/add`} component={PhotoAddPage} />\r\n                <Route path={`${match.url}/edit/:photoId`} component={PhotoAddPage} />\r\n\r\n                <Route component={NotFound} />\r\n            </Switch>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Photos;"],"sourceRoot":""}